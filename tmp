#include "../../includes/philo.h"



//Parsing argomenti : gli argomenti non possono mai essere o negativi
int ft_init_room(t_room *room, char **argv)
{
    int i;    

    struct timeval t1;
    struct timeval t0;
    time_t curtime;


    i = 1;
   
    gettimeofday(&t0, 0);
    /* ... */
    gettimeofday(&t1, 0);
    long elapsed = (t1.tv_sec - t0.tv_sec) * 1000000 + t1.tv_usec - t0.tv_usec;

    if (gettimeofday(&tv, NULL) == -1)
        return (0);
    curtime = tv.tv_sec;
    while (i < 6)
    {
        ft_printf("argv[%d]: %s\n", i, argv[i]);
       if(argv[i] && ft_atoi(argv[i]) <= 0)
			return 0;
		i++;
    }
    if (argv[1])
        room->n_philos = ft_atoi(argv[1]);
    if (argv[2])
        room->time_to_die = ft_atoi(argv[2]);
    if (argv[3])
        room->time_to_eat = ft_atoi(argv[3]);
    if (argv[4])
        room->time_to_sleep = ft_atoi(argv[4]);
    if (argv[5])
        room->time_to_die = ft_atoi(argv[5]);

    

    ft_printf("date: %ld\n", elapsed);
    return (1);
}


/* ************************************************************************** */


/**
 * 
 * argomenti: 
 * number_of_philosophers 
 * time_to_die
 * time_to_eat 
 * time_to_sleep
 * [number_of_times_each_philosopher_must_eat]
*/

#include "../includes/philo.h"

int main(int argc, char **argv)
{
    t_room tab;

    tab = (t_room){0};
    if (argc < 5 || argc > 6)
        return (0);
    if (ft_init_room(&tab, argv) != 1)
        return (0);
    return (0);
}

#ifndef PHILO
# define PHILO

# include "../libft/libft.h"
# include "../libft/gnl/get_next_line_bonus.h"
# include "../libft/printf/ft_printf.h"
#include <pthread.h>
#include <sys/time.h>

typedef struct s_waiter
{
    int numero_di_cicli;
    long start_time;
    long end_time;
    int philos_alive;  //keeps track of the state of the philos;
} t_waiter;

typedef struct s_philo
{
    pthread_mutex_t* lforks;
    pthread_mutex_t* rforks;
    int is_alive;
    int time_to_die;
    int time_to_eat;
    int time_to_sleep;
    int time_must_eat;
    long start_eat;
    long end_eat;
    long start_sleep;
    long end_sleep;
} t_philo;


typedef struct s_stanza //contiene le regole del gioco e tutte le info del tavolo
{
    int n_philos;
    int time_to_die;
    int time_to_eat;
    int time_to_sleep;
    int time_must_eat;
    t_philo *philos;
    t_waiter waiter;        //he is going to be the observer of the dinner;
    pthread_mutex_t* forks;
} t_room;


int ft_init_room(t_room *var, char **argv);

#endif
